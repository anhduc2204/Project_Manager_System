<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SignUp</title>
    <meta name="author" content="WNC.G13">
    <meta name="description" content="Project Management">
    <meta name="viewport" content="width=device-width,initial-scale=1">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="/css/RegisterStyle.css">
</head>
<body>
    <header id="mainheader">  
        <nav>  
            <ul>  
                <li><img src="~/image-svgrepo-com.svg" width="60px" height="60px" alt="Logo"></li>  
                <li><h1>Logo</h1></li>  
            </ul>  
        </nav>  
    </header>  
    
<div class="mainCenter">  
    <aside id="leftCenter">  
        <img src="~/image-svgrepo-com.svg" width="100%" height="100%" alt="Illustration">  
    </aside>  
    
    <main id="rightCenter">  
        <h1 style="font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">Let's Get Started 🚀</h1>  
        <h4>Log in to your account</h4>  
        <form action="" method="post" class="inline">  
            <div class="form-group custom-input">
                <div class="icon-email"></div>
                <input type="email" title="Email" class="form-control input-txt" name="email" placeholder="Email" required>
            </div>
            <div class="form-group custom-input">
                <div class="icon-person"></div>
                <input type="text" title="FullName" class="form-control input-txt" name="FullName" placeholder="FullName" required>
            </div>
            <div class="form-group custom-input">
                <div class="icon-phone"></div>
                <input type="text" title="PhoneNumber" class="form-control input-txt" name="PhoneNumber" placeholder="PhoneNumber" required>
            </div>
            <div class="form-group custom-input">
                <div class="icon-pass"></div>
                <input type="password" title="Password" class="form-control input-txt" name="password" placeholder="Password" required>
            </div>
            <div class="form-group custom-input">
                <div class="icon-pass"></div>
                <input type="password" title="ConfirmPassword" class="form-control input-txt" name="ConfirmPassword" placeholder="ConfirmPassword" required>
            </div>
            <br><br>
            <button type="submit"><b>SignUp</b></button> <br>
             @if (!string.IsNullOrEmpty(ViewBag.ErrorMessage))
                            {
                                <p style="color: red;">@ViewBag.ErrorMessage</p>
                            }
        </form>  
        <p style="text-align: center;"><i>Already have account? <a href="@Url.Action("Login", "Auth")"><u style="color: rgb(5, 128, 243);">SignIn</u></a></i></p>
    </main>  
</div>


<script>
    document.addEventListener("DOMContentLoaded",function (){
        const form = document.querySelector("form");
        const emailInput = document.querySelector("input[name='email']");
        const fullNameInput = document.querySelector("input[name='FullName']");
        const phoneNumberInput = document.querySelector("input[name='PhoneNumber']");
        const passwordInput = document.querySelector("input[name='password']");
        const confirmPasswordInput = document.querySelector("input[name='ConfirmPassword']");
        
        
        fullNameInput.addEventListener("input", () => validateFullName());
        phoneNumberInput.addEventListener("input",()=> validatePhoneNumber());
        passwordInput.addEventListener("input",()=> validatePassword());
        confirmPasswordInput.addEventListener("input",()=> validateConfirmPassword());
        
        form.addEventListener("submit", function (event){
            event.preventDefault();
            
            clearErrors();
            if (validateFullName() & validatePhoneNumber() & validatePassword() & validateConfirmPassword()){
                form.submit();
            }
        });
        
        function validateFullName(){
            clearError(fullNameInput);
            if (!fullNameInput.value.trim()){
               showError(fullNameInput, "Họ và tên không được để trống");
               return false;
                }
            return true;
        }
        
        function validatePhoneNumber(){
            clearError(phoneNumberInput);
            if (!phoneNumberInput.value.trim()){
                showError(phoneNumberInput,"Số điện thoại không được để trống");
                return false;
            }else if (!/^0\d{9,10}$/.test(phoneNumberInput.value)){
                showError(phoneNumberInput, "Số điện thoại không hợp lệ");
                return false;
            }
            
            return true;
        }
        
        function  validatePassword(){
            clearError(passwordInput);
            if (!passwordInput.value.trim()){
                showError(passwordInput, "Mật khẩu không được để trống");
                return false;
            }
            
            return true;
        }
        
        function validateConfirmPassword(){
            clearError(confirmPasswordInput);
            if (!passwordInput.value.trim()){
                showError(confirmPasswordInput, "Xác nhận mật khẩu không được để trống");
                return false;
            }else if (confirmPasswordInput.value !== passwordInput.value){
                showError(confirmPasswordInput,"Mật khẩu xác nhận không trùng khớp");
                return false;
            }
            
            return true;
        }
         
    function showError(input, message){
        input.style.borderColor ="red";
        let error= document.createElement("small");
        error.className ="error";
        error.style.color ="red";
        error.innerText = message;
        input.parentNode.appendChild(error);
    }
    
    function clearError(input){
        const error = input.parentNode.querySelector(".error");
        if (error) error.remove();
        input.style.borderColor = "#ccc";
    }
    
    
    function clearErrors(){
        document.querySelectorAll(".error").forEach(e=>e.remove());
        document.querySelectorAll(".form-control").forEach(input => input.style.borderColor='#ccc')
    }
        
    });
    
    
   
    
    
</script>
</body>
</html>